<?xml version="1.0" encoding="UTF-8"?>

<!--
    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。
    
    log: 
        /home/yef/logs/
        G://logs/
    //WARN    
-->
<Configuration status="WARN" monitorInterval="600">

    <Properties>
        <!-- 配置日志文件输出目录 -->
        <Property name="LOG_HOME">G://logs/</Property>
        <Property name="LOG_NAME">niufangzi</Property>
    </Properties>

    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </Console>

        <!-- info及以上级别的日志文件配置 (×××.log.日期.gz) -->
        <RollingRandomAccessFile name="service_appender"
                                 immediateFlush="true"  BufferSize="1024" 
                                 fileName="${LOG_HOME}/${LOG_NAME}.log"
                                 filePattern="${LOG_HOME}/${LOG_NAME}.log.%d{yyyy-MM-dd}.%i.log.gz">
            <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
                
                TimeBasedTriggeringPolicy  这个配置需要和filePattern结合使用，如果filePattern中配置的文件重命名规则是
                ${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。
                                          如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件。
             -->
              
            <PatternLayout>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M -- %msg%xEx%n</pattern>
            </PatternLayout>
            <Filters>
            	<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <!--  指定最多保存的文件个数
            <DefaultRolloverStrategy max="6" />
            -->  
        </RollingRandomAccessFile>

		<!-- debug级别的日志文件配置 (×××.log.日期.gz) -->
        <RollingRandomAccessFile name="service_debug_appender"
                                 immediateFlush="true"  BufferSize="1024" 
                                 fileName="${LOG_HOME}/${LOG_NAME}.debug.log"
                                 filePattern="${LOG_HOME}/${LOG_NAME}.debug.log.%d{yyyy-MM-dd}.%i.log.gz">
            <PatternLayout>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M -- %msg%xEx%n</pattern>
            </PatternLayout>
            <Filters>
            	<ThresholdFilter level="info" onMatch="DENY" onMismatch="ACCEPT"/>
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <!--  指定最多保存的文件个数
            <DefaultRolloverStrategy max="6" />
            -->  
        </RollingRandomAccessFile>
    </Appenders>

    <Loggers>
        <!-- 配置日志的根节点 -->
        <root level="debug">
            <appender-ref ref="service_appender"/>
            <appender-ref ref="service_debug_appender"/>
            <appender-ref ref="Console"/>
        </root>

        <!-- 第三方日志系统 -->
        <logger name="org.springframework.core" level="info"/>
        <logger name="org.springframework.beans" level="info"/>
        <logger name="org.springframework.context" level="info"/>
        <logger name="org.springframework.web" level="info"/>
        <logger name="org.jboss.netty" level="warn"/>
        <logger name="org.apache.http" level="warn"/>

        <!-- 日志实例(info),其中'service-log'继承root,但是root将日志输出控制台,而'service-log'将日志输出到文件,
        	通过属性'additivity="false"'将'service-log'的的日志不再输出到控制台 
        -->
        <logger name="service_log" level="info" includeLocation="true" additivity="true">
            <appender-ref ref="service_appender"/>
        </logger>
		
        <!-- 日志实例(debug) -->
        <logger name="debug_log" level="debug" includeLocation="true" additivity="true">
            <appender-ref ref="service_debug_appender"/>
        </logger>
		
    </Loggers>

</Configuration>